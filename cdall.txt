Experiment 1
Language processing system using GNU compiler Collection
Internal Working of GCC

Source code:
Code in exp1.c

#include <stdio.h>
void main()
{
printf("Hello\n");
}

Execution 

cpp exp1.c -o exp1.i
gcc -S exp1.i
as exp1.s -o exp1.o
ld --dynamic-linker /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 /usr/lib/x86_64-linux-gnu/crt1.o /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/x86_64-linux-gnu/crtn.o exp1.o -lc -o exp1
./exp1

___________________________________________________________________________________________________________________________________________________________________

Experiment 2

Identifier Recognition using lex

Source code: 
Code in exp2.l

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char temp[10],pun[10];
struct node {
char id[10], type[10];
struct node *next;
};
struct node *h = NULL, *p = NULL, *t = NULL;
%}
%%
int|float|char|double {
strcpy(temp, yytext);
}
[a-zA-Z][a-zA-Z0-9]* {
p = (struct node*)malloc(sizeof(struct node));
if (p == NULL) {
fprintf(stderr, "Overflow\n");
exit(1);
} else {
strcpy(p->type, temp);
strcpy(p->id, yytext);
p->next = NULL;
if (h == NULL) {
h = p;
} else {
t = h;
while (t->next != NULL) {
t = t->next;
}
t->next = p;
}
}
}
"," {strcpy(pun,yytext);}
";" {
p = h;
printf("ID\tData_Type\tAddress\n");
while (p != NULL) {
printf("%s\t%s\t\t%p\n", p->id, p->type, (void*)p);
p = p->next;}
}
%%
int main() {
yylex();
return 0;
}

Execution

lex exp2.l
gcc lex.yy.c -ll
./a.out

___________________________________________________________________________________________________________________________________________________________________


Experiment 3

Lexical Analyser using Lex

Source code:
Code in exp3.l

%{
int COMMENT=0;
%}
identifier [a-zA-Z][a-zA-Z0-9]*
%%
#.* {printf("\n%s is a preprocessor directive",yytext);}
int |
float |
char |
double |
while |
for |
struct |
typedef |
do |
if |
break |
continue |
void |
switch |
return |
main |
else |
goto {printf("\n%s is a keyword",yytext);}
"/*" {printf("\n%s is a comment",yytext);}
\{ {printf("\n%s --> BLOCK BEGINS",yytext);}
\} {printf("\n%s --> BLOCK ENDS",yytext);}
{identifier}(\[[0-9]*\])? {printf("\n%s is a valid identifier",yytext);}
\".*\" {printf("\n%s is a string",yytext);}
[0-9]+ {printf("\n%s is a number ",yytext);}
= {printf("\n%s is an Assignment operator",yytext);}
\<= |
\>= |
\< |
== |
\> {printf("\n%s is a Relational Operator",yytext);}
\+ |
\- |
\* |
\/ {printf("\n%s is an Arithmetic operator",yytext);}
\; |
\, |\! |
\: |
\& {printf("\n%s is a punctuation mark",yytext);}
\(
\) {}
%%
int main(int argc,char **argv) {
FILE *file;
file=fopen("sample.c","r");
if(!file)
{
printf("could not open file");
exit(0);
}
yyin=file;
yylex();
return 0;
}
int yywrap()
{
return (1);
}

Input file: sample.c
----------
#include<stdio.h>
void main(){
int a,b;
c=a+b;
printf("c=%d",c);
}

Execution 

lex exp3.l
gcc lex.yy.c -ll
./a.out

___________________________________________________________________________________________________________________________________________________________________


Experiment 4

Variable recognition using YACC

Source code:
Code in exp4.l

%{
#include "y.tab.h"
%}
%%
[a-zA-Z_][a-zA-Z_0-9]* return letter;
[0-9] return digit;
. return yytext[0];
\n return 0;
%%
int yywrap()
{
return 1;
}



Code in exp4.y:

%{
#include<stdio.h>
int valid=1;
%}
%token digit letter
%%
start : letter s
s : letter s
| digit s
|
;
%%
int yyerror()
{
printf("\nIts not a identifier!\n");
valid=0;
return 0;
}
int main()
{
printf("\nEnter a name to tested for identifier ");
yyparse();
if(valid)
{
printf("\nIt is a identifier!\n");
}
}

Execution 

lex exp4.l
yacc -d exp4.y
gcc lex.yy.c y.tab.c -ll
./a.out

___________________________________________________________________________________________________________________________________________________________________

Experiment 5

Arithmetic expression recognition using YACC

Source code:
Code in exp5.l:

%{
#include"y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext); return NUMBER;}
[a-zA-Z]+ {return ID;}
[\t]+ ;
\n {return 0;}
. {return yytext[0];}
%%



Code in exp5.y:

%{
#include <stdio.h>
#include <stdlib.h>
%}
%token NUMBER ID
%left '+' '-'
%left '*' '/'
%%
expr: expr '+' expr
    |expr '-' expr
|expr '*' expr
|expr '/' expr
|'-'NUMBER
|'-'ID
|'('expr')'
|NUMBER
|ID
%%

int yyerror(char *s)
{
    printf("\nExpression is invalid\n");
    exit(0);
}
int main()
{
    printf("Enter the expression\n");
    yyparse();
    printf("\nExpression is valid\n");
    exit(0);
}

Execution 

lex exp5.l
yacc -d exp5.y
gcc lex.yy.c y.tab.c -ll
./a.out
___________________________________________________________________________________________________________________________________________________________________



